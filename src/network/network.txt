1. What happens when we first load the site?
2. What is HTTP? Why is it needed? (English)
3. The structure of the HTTP request (headers, body, etc) (English)
4. HTTP methods
5. HTTP method semantic (when to use GET or POST or maybe PATCH?)
6. Security / idempotency / caching of methods
7. POST vs PUT
8. HTTP/HTTPs difference?
9. Network OSI model


1. 1. Браузер отправляет запрос на сервер, запрашивая страницу сайта.
2. Сервер получает запрос и начинает обработку страницы.
3. Сервер отправляет HTML код страницы обратно в браузер.
4. Браузер начинает обработку полученной HTML страницы и загружает все связанные с этой страницей ресурсы, такие как стили CSS, изображения и скрипты JavaScript.
5. Браузер отображает страницу на экране пользователя.

2. HTTP (Hypertext Transfer Protocol) is a data transfer protocol that is used to transfer information between computers on the Internet. HTTP is used to organize web pages, transfer data between a browser and a web server, and transfer files. it provides a standard and reliable way to transfer data between computers.

3. The HTTP request has the following structure:
     Method: specifies what action to perform on the resource GET POST PUT
     URL: points to the resource to be interacted with
     HTTP Version Protocol: Indicates the protocol version used for the request
     Headers: contain additional information about the request
     Request body: used to pass request parameters or data

4.  HTTP-методы определяют тип операции, которую должен выполнить сервер при обработке запроса.
   Они бывают: 
1. GET - запрос на получение данных
2. POST - запрос на отправку данных
3. PUT - запрос на обновление данных
4. DELETE - запрос на удаление данных
5. PATCH - запрос на частичное обновление данных
6. HEAD - запрос только на получение заголовков ответа
7. OPTIONS - запрос на получение информации об доступных методах для ресурса
8. TRACE - запрос на получение информации о маршруте передачи запроса
9. CONNECT - запрос на установление соединения с сервером через прокси-сервер.

5. Метод HTTP определяет, какое действие должен выполнить сервер при получении запроса от клиента.
1. GET: используется для получения данных из сервера. 
2. POST: используется для отправки данных на сервер для их обновления или добавления.
3. PATCH: используется для изменения только определенной части данных на сервере. 
Нужно использовать GET для получения данных, POST для добавления или обновления данных и PATCH для изменения определенной части данных.

6. 1. Безопасность означает, что методы должны быть защищены от чужого доступа или изменений данных. Для этого можно использовать различные методы аутентификации и авторизации, а также шифрование данных при их передаче.
Можно использовать HTTPS, который шифрует данные. Также методы могут быть защищены паролем,  ключом и т.д. 
1. Идемпотентность: это значит, что вызов метода не должен приводить к изменению данных или состояния при повторных вызовах. Если запрос был выполнен успешно, то повторный вызов должен вернуть тот же самый результат.
1. Кэширование: это означает, что результаты методов могут быть сохранены на время, чтобы избежать повторных запросов на сервер. Кэширование может сильно ускорить работу приложения и уменьшить нагрузку на сервер.

7. POST и PUT — это HTTP-методы, используемые для отправки данных на сервер.
POSt:
Используется для создания нового ресурса на сервере
Запрос отправляет данные в теле HTTP-сообщения.
Сервер создает новый ресурс на основе данных в теле запроса.
Каждый запрос создает новый ресурс, даже если точно такие же данные были отправлены до этого.
PUT:
Используется для обновления существующего ресурса на сервере
Запрос отправляет данные в теле HTTP-сообщения.
Сервер обновляет существующий ресурс на основе данных в теле запроса.
POST используется для создания новых ресурсов, а PUT — для обновления существующих ресурсов.

8. HTTP - это стандартный протокол, который используется для передачи данных между веб-сервером и веб-браузером. Он работает через открытый порт, и информация передается в незашифрованном виде.
HTTPS - это защищенная версия HTTP. Он добавляет защиту данных с помощью шифрования, чтобы защитить конфиденциальность информации. Это обычно используется для передачи конфиденциальных данных, таких как номера кредитных карт, пароли и т.д.
Таким образом, главное отличие между HTTP и HTTPS заключается в том, что HTTPS обеспечивает дополнительную защиту передаваемых данных через шифрование, что делает его безопаснее для использования в Интернете.

9. Сетевая модель OSI (Open Systems Interconnection) – это стандарт, описывающий структуру и функцию компьютерных сетей. Она включает в себя 7 уровней, каждый из которых представляет  набор протоколов, используемых для передачи данных.
1. Физический уровень – этот уровень определяет характеристики физического соединения между устройствами. Он определяет, как данные будут передаваться по физическому кабелю или беспроводному каналу.
2. Канальный уровень  – этот уровень предназначен для управления передачей данных между сетевыми устройствами внутри локальной сети (LAN). Он определяет, как данные будут группироваться и упаковываться в кадры.
3. Сетевой уровень  – этот уровень отвечает за передачу данных между различными сетевыми устройствами вне локальной сети (WAN). Он определяет, как данные будут направляться в сети и как адресоваться.
4. Транспортный уровень – этот уровень управляет передачей данных между приложениями на разных устройствах. Он определяет, как данные будут передаваться между приложениями.
5. Сеансовый уровень – этот уровень управляет соединением между приложениями и гарантирует целостность передачи данных. Он определяет, как будет устанавливаться, управляться и завершаться сессия передачи данных.
6. Уровень представления  – этот уровень преобразует данные в формат, который может быть понят и обработан приложениями. 
7. Прикладной уровень – этот уровень обеспечивает сетевые службы для приложений, например, электронная почта, веб-браузеры, файловые сервисы и т.д. Он определяет, как данные будут передаваться между приложениями и какими способами они будут использоваться.
Сетевая модель OSI является важным инструментом для разработчиков и администраторов компьютерных сетей, который позволяет им более эффективно планировать, управлять и отлаживать сетевые приложения и устройства.